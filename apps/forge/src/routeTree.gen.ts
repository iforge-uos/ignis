/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as TrainingIndexImport } from './routes/training/index'
import { Route as SocialsIndexImport } from './routes/socials/index'
import { Route as TrainingRiskAssessmentsImport } from './routes/training/risk-assessments'
import { Route as TrainingFinishedImport } from './routes/training/finished'
import { Route as TrainingApprovedMaterialsImport } from './routes/training/approved-materials'
import { Route as AuthenticatedReponlyImport } from './routes/_authenticated/_reponly'
import { Route as AuthLogoutIndexImport } from './routes/auth/logout/index'
import { Route as AuthLoginIndexImport } from './routes/auth/login/index'
import { Route as AuthenticatedUserIndexImport } from './routes/_authenticated/user/index'
import { Route as AuthenticatedSigninIndexImport } from './routes/_authenticated/signin/index'
import { Route as AuthenticatedPrintingIndexImport } from './routes/_authenticated/printing/index'
import { Route as TrainingLocationsMainspaceImport } from './routes/training/locations/mainspace'
import { Route as TrainingLocationsHeartspaceImport } from './routes/training/locations/heartspace'
import { Route as TrainingLocationsGeorgePorterImport } from './routes/training/locations/george-porter'
import { Route as AuthLoginCompleteImport } from './routes/auth/login/complete'
import { Route as AuthenticatedUserUserauthImport } from './routes/_authenticated/user/_userauth'
import { Route as AuthenticatedTrainingIdImport } from './routes/_authenticated/training/$id'
import { Route as AuthenticatedUserSettingsIndexImport } from './routes/_authenticated/user/settings/index'
import { Route as AuthenticatedUserProfileIndexImport } from './routes/_authenticated/user/profile/index'
import { Route as AuthenticatedSigninAgreementsIndexImport } from './routes/_authenticated/signin/agreements/index'
import { Route as AuthenticatedReponlyUsersIndexImport } from './routes/_authenticated/_reponly/users/index'
import { Route as AuthenticatedSigninAgreementsIdImport } from './routes/_authenticated/signin/agreements/$id'
import { Route as AuthenticatedReponlyUsersIdImport } from './routes/_authenticated/_reponly/users/$id'
import { Route as AuthenticatedReponlySigninDashboardImport } from './routes/_authenticated/_reponly/signin/dashboard'
import { Route as AuthenticatedReponlySigninActionsIndexImport } from './routes/_authenticated/_reponly/signin/actions/index'
import { Route as AuthenticatedReponlySigninActionsRegisterImport } from './routes/_authenticated/_reponly/signin/actions/register'
import { Route as AuthenticatedReponlySigninActionsOutImport } from './routes/_authenticated/_reponly/signin/actions/out'
import { Route as AuthenticatedReponlySigninActionsInImport } from './routes/_authenticated/_reponly/signin/actions/in'
import { Route as AuthenticatedReponlySigninActionsEnqueueImport } from './routes/_authenticated/_reponly/signin/actions/enqueue'

// Create Virtual Routes

const AuthenticatedUserImport = createFileRoute('/_authenticated/user')()

// Create/Update Routes

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedUserRoute = AuthenticatedUserImport.update({
  path: '/user',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const TrainingIndexRoute = TrainingIndexImport.update({
  path: '/training/',
  getParentRoute: () => rootRoute,
} as any)

const SocialsIndexRoute = SocialsIndexImport.update({
  path: '/socials/',
  getParentRoute: () => rootRoute,
} as any)

const TrainingRiskAssessmentsRoute = TrainingRiskAssessmentsImport.update({
  path: '/training/risk-assessments',
  getParentRoute: () => rootRoute,
} as any)

const TrainingFinishedRoute = TrainingFinishedImport.update({
  path: '/training/finished',
  getParentRoute: () => rootRoute,
} as any)

const TrainingApprovedMaterialsRoute = TrainingApprovedMaterialsImport.update({
  path: '/training/approved-materials',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedReponlyRoute = AuthenticatedReponlyImport.update({
  id: '/_reponly',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthLogoutIndexRoute = AuthLogoutIndexImport.update({
  path: '/auth/logout/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginIndexRoute = AuthLoginIndexImport.update({
  path: '/auth/login/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedUserIndexRoute = AuthenticatedUserIndexImport.update({
  path: '/',
  getParentRoute: () => AuthenticatedUserRoute,
} as any)

const AuthenticatedSigninIndexRoute = AuthenticatedSigninIndexImport.update({
  path: '/signin/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedPrintingIndexRoute = AuthenticatedPrintingIndexImport.update(
  {
    path: '/printing/',
    getParentRoute: () => AuthenticatedRoute,
  } as any,
)

const TrainingLocationsMainspaceRoute = TrainingLocationsMainspaceImport.update(
  {
    path: '/training/locations/mainspace',
    getParentRoute: () => rootRoute,
  } as any,
)

const TrainingLocationsHeartspaceRoute =
  TrainingLocationsHeartspaceImport.update({
    path: '/training/locations/heartspace',
    getParentRoute: () => rootRoute,
  } as any)

const TrainingLocationsGeorgePorterRoute =
  TrainingLocationsGeorgePorterImport.update({
    path: '/training/locations/george-porter',
    getParentRoute: () => rootRoute,
  } as any)

const AuthLoginCompleteRoute = AuthLoginCompleteImport.update({
  path: '/auth/login/complete',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedUserUserauthRoute = AuthenticatedUserUserauthImport.update({
  id: '/_userauth',
  getParentRoute: () => AuthenticatedUserRoute,
} as any)

const AuthenticatedTrainingIdRoute = AuthenticatedTrainingIdImport.update({
  path: '/training/$id',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedUserSettingsIndexRoute =
  AuthenticatedUserSettingsIndexImport.update({
    path: '/settings/',
    getParentRoute: () => AuthenticatedUserRoute,
  } as any)

const AuthenticatedUserProfileIndexRoute =
  AuthenticatedUserProfileIndexImport.update({
    path: '/profile/',
    getParentRoute: () => AuthenticatedUserRoute,
  } as any)

const AuthenticatedSigninAgreementsIndexRoute =
  AuthenticatedSigninAgreementsIndexImport.update({
    path: '/signin/agreements/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedReponlyUsersIndexRoute =
  AuthenticatedReponlyUsersIndexImport.update({
    path: '/users/',
    getParentRoute: () => AuthenticatedReponlyRoute,
  } as any)

const AuthenticatedSigninAgreementsIdRoute =
  AuthenticatedSigninAgreementsIdImport.update({
    path: '/signin/agreements/$id',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedReponlyUsersIdRoute =
  AuthenticatedReponlyUsersIdImport.update({
    path: '/users/$id',
    getParentRoute: () => AuthenticatedReponlyRoute,
  } as any)

const AuthenticatedReponlySigninDashboardRoute =
  AuthenticatedReponlySigninDashboardImport.update({
    path: '/signin/dashboard',
    getParentRoute: () => AuthenticatedReponlyRoute,
  } as any)

const AuthenticatedReponlySigninActionsIndexRoute =
  AuthenticatedReponlySigninActionsIndexImport.update({
    path: '/signin/actions/',
    getParentRoute: () => AuthenticatedReponlyRoute,
  } as any)

const AuthenticatedReponlySigninActionsRegisterRoute =
  AuthenticatedReponlySigninActionsRegisterImport.update({
    path: '/signin/actions/register',
    getParentRoute: () => AuthenticatedReponlyRoute,
  } as any)

const AuthenticatedReponlySigninActionsOutRoute =
  AuthenticatedReponlySigninActionsOutImport.update({
    path: '/signin/actions/out',
    getParentRoute: () => AuthenticatedReponlyRoute,
  } as any)

const AuthenticatedReponlySigninActionsInRoute =
  AuthenticatedReponlySigninActionsInImport.update({
    path: '/signin/actions/in',
    getParentRoute: () => AuthenticatedReponlyRoute,
  } as any)

const AuthenticatedReponlySigninActionsEnqueueRoute =
  AuthenticatedReponlySigninActionsEnqueueImport.update({
    path: '/signin/actions/enqueue',
    getParentRoute: () => AuthenticatedReponlyRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/_reponly': {
      preLoaderRoute: typeof AuthenticatedReponlyImport
      parentRoute: typeof AuthenticatedImport
    }
    '/training/approved-materials': {
      preLoaderRoute: typeof TrainingApprovedMaterialsImport
      parentRoute: typeof rootRoute
    }
    '/training/finished': {
      preLoaderRoute: typeof TrainingFinishedImport
      parentRoute: typeof rootRoute
    }
    '/training/risk-assessments': {
      preLoaderRoute: typeof TrainingRiskAssessmentsImport
      parentRoute: typeof rootRoute
    }
    '/socials/': {
      preLoaderRoute: typeof SocialsIndexImport
      parentRoute: typeof rootRoute
    }
    '/training/': {
      preLoaderRoute: typeof TrainingIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/training/$id': {
      preLoaderRoute: typeof AuthenticatedTrainingIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/user': {
      preLoaderRoute: typeof AuthenticatedUserImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/user/_userauth': {
      preLoaderRoute: typeof AuthenticatedUserUserauthImport
      parentRoute: typeof AuthenticatedUserRoute
    }
    '/auth/login/complete': {
      preLoaderRoute: typeof AuthLoginCompleteImport
      parentRoute: typeof rootRoute
    }
    '/training/locations/george-porter': {
      preLoaderRoute: typeof TrainingLocationsGeorgePorterImport
      parentRoute: typeof rootRoute
    }
    '/training/locations/heartspace': {
      preLoaderRoute: typeof TrainingLocationsHeartspaceImport
      parentRoute: typeof rootRoute
    }
    '/training/locations/mainspace': {
      preLoaderRoute: typeof TrainingLocationsMainspaceImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/printing/': {
      preLoaderRoute: typeof AuthenticatedPrintingIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/signin/': {
      preLoaderRoute: typeof AuthenticatedSigninIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/user/': {
      preLoaderRoute: typeof AuthenticatedUserIndexImport
      parentRoute: typeof AuthenticatedUserImport
    }
    '/auth/login/': {
      preLoaderRoute: typeof AuthLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/logout/': {
      preLoaderRoute: typeof AuthLogoutIndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/_reponly/signin/dashboard': {
      preLoaderRoute: typeof AuthenticatedReponlySigninDashboardImport
      parentRoute: typeof AuthenticatedReponlyImport
    }
    '/_authenticated/_reponly/users/$id': {
      preLoaderRoute: typeof AuthenticatedReponlyUsersIdImport
      parentRoute: typeof AuthenticatedReponlyImport
    }
    '/_authenticated/signin/agreements/$id': {
      preLoaderRoute: typeof AuthenticatedSigninAgreementsIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/_reponly/users/': {
      preLoaderRoute: typeof AuthenticatedReponlyUsersIndexImport
      parentRoute: typeof AuthenticatedReponlyImport
    }
    '/_authenticated/signin/agreements/': {
      preLoaderRoute: typeof AuthenticatedSigninAgreementsIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/user/profile/': {
      preLoaderRoute: typeof AuthenticatedUserProfileIndexImport
      parentRoute: typeof AuthenticatedUserImport
    }
    '/_authenticated/user/settings/': {
      preLoaderRoute: typeof AuthenticatedUserSettingsIndexImport
      parentRoute: typeof AuthenticatedUserImport
    }
    '/_authenticated/_reponly/signin/actions/enqueue': {
      preLoaderRoute: typeof AuthenticatedReponlySigninActionsEnqueueImport
      parentRoute: typeof AuthenticatedReponlyImport
    }
    '/_authenticated/_reponly/signin/actions/in': {
      preLoaderRoute: typeof AuthenticatedReponlySigninActionsInImport
      parentRoute: typeof AuthenticatedReponlyImport
    }
    '/_authenticated/_reponly/signin/actions/out': {
      preLoaderRoute: typeof AuthenticatedReponlySigninActionsOutImport
      parentRoute: typeof AuthenticatedReponlyImport
    }
    '/_authenticated/_reponly/signin/actions/register': {
      preLoaderRoute: typeof AuthenticatedReponlySigninActionsRegisterImport
      parentRoute: typeof AuthenticatedReponlyImport
    }
    '/_authenticated/_reponly/signin/actions/': {
      preLoaderRoute: typeof AuthenticatedReponlySigninActionsIndexImport
      parentRoute: typeof AuthenticatedReponlyImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AuthenticatedRoute.addChildren([
    AuthenticatedReponlyRoute.addChildren([
      AuthenticatedReponlySigninDashboardRoute,
      AuthenticatedReponlyUsersIdRoute,
      AuthenticatedReponlyUsersIndexRoute,
      AuthenticatedReponlySigninActionsEnqueueRoute,
      AuthenticatedReponlySigninActionsInRoute,
      AuthenticatedReponlySigninActionsOutRoute,
      AuthenticatedReponlySigninActionsRegisterRoute,
      AuthenticatedReponlySigninActionsIndexRoute,
    ]),
    AuthenticatedTrainingIdRoute,
    AuthenticatedUserRoute.addChildren([
      AuthenticatedUserIndexRoute,
      AuthenticatedUserProfileIndexRoute,
      AuthenticatedUserSettingsIndexRoute,
    ]),
    AuthenticatedPrintingIndexRoute,
    AuthenticatedSigninIndexRoute,
    AuthenticatedSigninAgreementsIdRoute,
    AuthenticatedSigninAgreementsIndexRoute,
  ]),
  TrainingApprovedMaterialsRoute,
  TrainingFinishedRoute,
  TrainingRiskAssessmentsRoute,
  SocialsIndexRoute,
  TrainingIndexRoute,
  AuthLoginCompleteRoute,
  TrainingLocationsGeorgePorterRoute,
  TrainingLocationsHeartspaceRoute,
  TrainingLocationsMainspaceRoute,
  AuthLoginIndexRoute,
  AuthLogoutIndexRoute,
])

/* prettier-ignore-end */
