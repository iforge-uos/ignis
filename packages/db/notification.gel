module notification {
    type MailingList extending default::Auditable {
        required name: str;
        required description: str;
        multi subscribers := .<mailing_list_subscriptions[is users::User];

        index fts::index on ((
            fts::with_options(
                .name,
                language := fts::Language.eng,
                weight_category := fts::Weight.A,
            ),
            fts::with_options(
                .description,
                language := fts::Language.eng,
                weight_category := fts::Weight.B,
            )
        ));
    }

    scalar type Type extending enum<
        ADMIN,
        ADVERT,
        ANNOUNCEMENT,
        EVENT,
        HEALTH_AND_SAFETY,
        INFRACTION,
        PRINTING,
        QUEUE_SLOT_ACTIVE,
        RECRUITMENT,
        REFERRAL,
        REMINDER,
        TRAINING,
    >;

    scalar type DeliveryMethod extending enum<
        BANNER,
        EMAIL,
        TRAY,
        POPUP,
        DISCORD,
    >;

    scalar type Status extending enum<
        DRAFT,
        REVIEW,
        QUEUED,
        SENDING,
        SENT,
        ERRORED,
    >;

    # magic to make it act like a singleton
    type AllUsers {
        required MAGIC: int16 {
            readonly := true;
            default := 0;
            constraint exclusive;
        }
    }
    type AllReps {
        required MAGIC: int16 {
            readonly := true;
            default := 0;
            constraint exclusive;
        }
    }

    type Notification extending default::Auditable {
        required multi delivery_methods: DeliveryMethod;
        required type: Type;
        required status: Status;
        required priority: int16 {
            annotation description := $$
                The priority of the notification, defaults to zero. The higher the number the higher the priority. If
                there are two notifications trying to be used at the same time the higher priority one will take over.
                Otherwise the newer one prevails
            $$;
            default := 2;
            constraint min_value(1);
            constraint max_value(3);
        }
        dispatched_at: datetime {
            annotation description := "When the notification started rolling out or if it's scheduled when it will be dispatched";
        }
        required title: str {
            annotation description := "The heading of the rendered notification (web) or the subject of the rendered email"
        }
        required content: str {
            annotation description := "The content (MARKDOWN) from plate"
        }
        required multi targets: AllUsers | AllReps | users::User | team::Team | MailingList | event::Event {
            annotation description := "Who will be receiving the notification";
            on target delete allow;
        }
    }

    type SystemNotification extending Notification {
        required source: str {
            annotation description := "The name of the service / module which caused this notification"
        }
    }

    type AuthoredNotification extending Notification {
        required author: users::User;
        approved_by: users::Rep;
        approved_on: datetime;
    }
}