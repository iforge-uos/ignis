// GENERATED by @gel/generate v0.6.2

import type {Duration, Executor} from "gel";

export type TestArgs = {
  readonly "id": string;
};

export type TestReturns = {
  "username": string;
  "ucard_number": number;
  "pronouns": string | null;
  "profile_picture": string | null;
  "organisational_unit": string;
  "email": string;
  "display_name": string;
  "last_name": string | null;
  "first_name": string;
  "created_at": Date;
  "id": string;
  "updated_at": Date;
  "bookings": Array<{
    "updated_at": Date;
    "id": string;
    "created_at": Date;
    "ends_at": Date;
    "starts_at": Date;
    "duration": Duration;
    "cancelled": boolean | null;
  }>;
  "sign_ins": Array<{
    "ends_at": Date | null;
    "id": string;
    "created_at": Date;
    "duration": Duration;
    "signed_out": boolean;
    "tools": Array<string>;
  }>;
  "infractions": Array<{
    "created_at": Date;
    "id": string;
    "duration": Duration | null;
    "ends_at": Date | null;
    "reason": string;
    "resolved": boolean;
    "type": ("WARNING" | "TEMP_BAN" | "PERM_BAN" | "RESTRICTION" | "TRAINING_ISSUE");
  }>;
  "agreements_signed": Array<{
    "updated_at": Date;
    "id": string;
    "created_at": Date;
    "content": string;
    "_content_hash": Uint8Array;
    "version": number;
    "name": string;
    "@version_signed": number | null;
    "@created_at": Date | null;
  }>;
  "notifications": Array<{
    "updated_at": Date;
    "id": string;
    "created_at": Date;
    "content": string;
    "delivery_method": [(("BANNER" | "EMAIL" | "TRAY" | "POPUP" | "DISCORD")), ...(("BANNER" | "EMAIL" | "TRAY" | "POPUP" | "DISCORD"))[]];
    "dispatched_at": Date;
    "priority": number;
    "status": ("DRAFT" | "REVIEW" | "QUEUED" | "SENDING" | "SENT" | "ERRORED");
    "title": string;
    "type": ("ADMIN" | "ADVERT" | "ANNOUNCEMENT" | "EVENT" | "HEALTH_AND_SAFETY" | "INFRACTION" | "PRINTING" | "QUEUE_SLOT_ACTIVE" | "RECRUITMENT" | "REFERRAL" | "REMINDER" | "TRAINING");
    "@acknowledged": Date | null;
  }>;
  "mailing_list_subscriptions": Array<{
    "updated_at": Date;
    "id": string;
    "created_at": Date;
    "description": string;
    "name": string;
  }>;
  "training": Array<{
    "updated_at": Date;
    "id": string;
    "created_at": Date;
    "in_person": boolean;
    "locations": Array<("MAINSPACE" | "HEARTSPACE" | "GEORGE_PORTER")>;
    "name": string;
    "compulsory": boolean;
    "description": string;
    "enabled": boolean;
    "expires_after": Duration | null;
    "icon_url": string | null;
    "training_lockout": Duration | null;
    "@infraction": string | null;
    "@in_person_signed_off_by": string | null;
    "@created_at": Date | null;
    "@in_person_created_at": Date | null;
  }>;
  "roles": Array<{
    "id": string;
    "name": string;
  }>;
  "identity": {
    "modified_at": Date;
    "created_at": Date;
    "id": string;
    "issuer": string;
    "subject": string;
  };
} | null;

export function test(client: Executor, args: TestArgs): Promise<TestReturns> {
  return client.querySingle(`\
with user := (
    delete users::User filter .id = <uuid>$id
),


select user{**}`, args);

}
