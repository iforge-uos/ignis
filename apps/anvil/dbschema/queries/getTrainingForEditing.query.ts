// GENERATED by @edgedb/generate v0.5.6

import type {Duration, Executor} from "edgedb";

export type GetTrainingForEditingArgs = {
  readonly "id": string;
};

export type GetTrainingForEditingReturns = {
  "sections": Array<{
    "type_name": string;
    "name": string | null;
    "duration": Duration | null;
    "answers": Array<{
      "id": string;
      "content": string;
      "description": string | null;
    }>;
    "content": string;
    "enabled": boolean;
    "id": string;
    "index": number;
  }>;
  "updated_at": Date;
  "id": string;
  "created_at": Date;
  "in_person": boolean;
  "locations": Array<("MAINSPACE" | "HEARTSPACE" | "GEORGE_PORTER")>;
  "name": string;
  "compulsory": boolean;
  "description": string;
  "enabled": boolean;
  "expires_after": Duration | null;
  "icon_url": string | null;
  "training_lockout": Duration | null;
  "rep": {
    "updated_at": Date;
    "id": string;
    "created_at": Date;
    "in_person": boolean;
    "locations": Array<("MAINSPACE" | "HEARTSPACE" | "GEORGE_PORTER")>;
    "name": string;
    "compulsory": boolean;
    "description": string;
    "enabled": boolean;
    "expires_after": Duration | null;
    "icon_url": string | null;
    "training_lockout": Duration | null;
  } | null;
  "questions": Array<{
    "index": number;
    "enabled": boolean;
    "content": string;
    "id": string;
    "type": ("SINGLE" | "MULTI");
  }>;
  "pages": Array<{
    "index": number;
    "enabled": boolean;
    "content": string;
    "id": string;
    "duration": Duration | null;
    "name": string;
  }>;
};

export function getTrainingForEditing(client: Executor, args: GetTrainingForEditingArgs): Promise<GetTrainingForEditingReturns> {
  return client.queryRequiredSingle(`\
select assert_exists(
    training::Training {
        **,
        sections: {
            *,
            type_name := .__type__.name,
            [is training::Page].name,
            [is training::Page].duration,
            answers := [is training::Question].answers {
                id,
                content,
                description,
            },
        }
    }
    filter .id = <uuid>$id
)`, args);

}
