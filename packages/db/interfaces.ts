// GENERATED by @gel/generate v0.6.2

import type * as gel from "gel";
export namespace std {
  export interface BaseObject {
    "id": string;
  }
  export interface $Object extends BaseObject {}
  export type Endian = "Little" | "Big";
  export interface FreeObject {}
  export type JsonEmpty = "ReturnEmpty" | "ReturnTarget" | "Error" | "UseNull" | "DeleteKey";
  export namespace enc {
    export type Base64Alphabet = "standard" | "urlsafe";
  }
  export namespace fts {
    export type ElasticLanguage = "ara" | "bul" | "cat" | "ces" | "ckb" | "dan" | "deu" | "ell" | "eng" | "eus" | "fas" | "fin" | "fra" | "gle" | "glg" | "hin" | "hun" | "hye" | "ind" | "ita" | "lav" | "nld" | "nor" | "por" | "ron" | "rus" | "spa" | "swe" | "tha" | "tur" | "zho" | "edb_Brazilian" | "edb_ChineseJapaneseKorean";
    export type Language = "ara" | "hye" | "eus" | "cat" | "dan" | "nld" | "eng" | "fin" | "fra" | "deu" | "ell" | "hin" | "hun" | "ind" | "gle" | "ita" | "nor" | "por" | "ron" | "rus" | "spa" | "swe" | "tur";
    export type LuceneLanguage = "ara" | "ben" | "bul" | "cat" | "ces" | "ckb" | "dan" | "deu" | "ell" | "eng" | "est" | "eus" | "fas" | "fin" | "fra" | "gle" | "glg" | "hin" | "hun" | "hye" | "ind" | "ita" | "lav" | "lit" | "nld" | "nor" | "por" | "ron" | "rus" | "spa" | "srp" | "swe" | "tha" | "tur" | "edb_Brazilian" | "edb_ChineseJapaneseKorean" | "edb_Indian";
    export type PGLanguage = "xxx_simple" | "ara" | "hye" | "eus" | "cat" | "dan" | "nld" | "eng" | "fin" | "fra" | "deu" | "ell" | "hin" | "hun" | "ind" | "gle" | "ita" | "lit" | "npi" | "nor" | "por" | "ron" | "rus" | "srp" | "spa" | "swe" | "tam" | "tur" | "yid";
    export type Weight = "A" | "B" | "C" | "D";
  }
  export namespace net {
    export type RequestFailureKind = "NetworkError" | "Timeout";
    export type RequestState = "Pending" | "InProgress" | "Completed" | "Failed";
    export namespace http {
      export type Method = "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "OPTIONS" | "PATCH";
      export interface Response extends std.BaseObject {
        "created_at": Date;
        "status"?: number | null;
        "headers"?: {name: string, value: string}[] | null;
        "body"?: Uint8Array | null;
        "request"?: ScheduledRequest | null;
      }
      export interface ScheduledRequest extends std.BaseObject {
        "state": std.net.RequestState;
        "created_at": Date;
        "updated_at": Date;
        "failure"?: {kind: std.net.RequestFailureKind, message: string} | null;
        "url": string;
        "method": Method;
        "headers"?: {name: string, value: string}[] | null;
        "body"?: Uint8Array | null;
        "response"?: Response | null;
      }
    }
  }
}
export namespace ai_rep {
  export interface Question extends std.$Object {
    "answer": string;
    "title": string;
    "rep_only": boolean;
  }
}
export namespace cfg {
  export interface ConfigObject extends std.BaseObject {}
  export interface AbstractConfig extends ConfigObject {
    "session_idle_timeout": gel.Duration;
    "default_transaction_isolation": sys.TransactionIsolation;
    "default_transaction_access_mode": sys.TransactionAccessMode;
    "default_transaction_deferrable": sys.TransactionDeferrability;
    "session_idle_transaction_timeout": gel.Duration;
    "query_execution_timeout": gel.Duration;
    "listen_port": number;
    "listen_addresses": string[];
    "current_email_provider_name"?: string | null;
    "allow_dml_in_functions"?: boolean | null;
    "allow_bare_ddl"?: AllowBareDDL | null;
    "store_migration_sdl"?: StoreMigrationSDL | null;
    "apply_access_policies"?: boolean | null;
    "apply_access_policies_pg"?: boolean | null;
    "allow_user_specified_id"?: boolean | null;
    "simple_scoping"?: boolean | null;
    "warn_old_scoping"?: boolean | null;
    "cors_allow_origins": string[];
    "auto_rebuild_query_cache"?: boolean | null;
    "auto_rebuild_query_cache_timeout"?: gel.Duration | null;
    "query_cache_mode"?: QueryCacheMode | null;
    "http_max_connections"?: number | null;
    "shared_buffers"?: gel.ConfigMemory | null;
    "query_work_mem"?: gel.ConfigMemory | null;
    "maintenance_work_mem"?: gel.ConfigMemory | null;
    "effective_cache_size"?: gel.ConfigMemory | null;
    "effective_io_concurrency"?: number | null;
    "default_statistics_target"?: number | null;
    "force_database_error"?: string | null;
    "_pg_prepared_statement_cache_size": number;
    "track_query_stats"?: QueryStatsOption | null;
    "extensions": ExtensionConfig[];
    "auth": Auth[];
    "email_providers": EmailProviderConfig[];
  }
  export type AllowBareDDL = "AlwaysAllow" | "NeverAllow";
  export interface Auth extends ConfigObject {
    "priority": number;
    "user": string[];
    "comment"?: string | null;
    "method"?: AuthMethod | null;
  }
  export interface AuthMethod extends ConfigObject {
    "transports": ConnectionTransport[];
  }
  export interface DatabaseConfig extends AbstractConfig {}
  export interface BranchConfig extends DatabaseConfig {}
  export interface Config extends AbstractConfig {}
  export type ConnectionTransport = "TCP" | "TCP_PG" | "HTTP" | "SIMPLE_HTTP" | "HTTP_METRICS" | "HTTP_HEALTH";
  export interface EmailProviderConfig extends ConfigObject {
    "name": string;
  }
  export interface ExtensionConfig extends ConfigObject {
    "cfg": AbstractConfig;
  }
  export interface InstanceConfig extends AbstractConfig {}
  export interface JWT extends AuthMethod {
    "transports": ConnectionTransport[];
  }
  export interface Password extends AuthMethod {
    "transports": ConnectionTransport[];
  }
  export type QueryCacheMode = "InMemory" | "RegInline" | "PgFunc" | "Default";
  export type QueryStatsOption = "None" | "All";
  export interface SCRAM extends AuthMethod {
    "transports": ConnectionTransport[];
  }
  export interface SMTPProviderConfig extends EmailProviderConfig {
    "sender"?: string | null;
    "host"?: string | null;
    "port"?: number | null;
    "username"?: string | null;
    "password"?: string | null;
    "security": SMTPSecurity;
    "validate_certs": boolean;
    "timeout_per_email": gel.Duration;
    "timeout_per_attempt": gel.Duration;
  }
  export type SMTPSecurity = "PlainText" | "TLS" | "STARTTLS" | "STARTTLSOrPlainText";
  export type StoreMigrationSDL = "AlwaysStore" | "NeverStore";
  export interface Trust extends AuthMethod {}
  export interface mTLS extends AuthMethod {
    "transports": ConnectionTransport[];
  }
}
export namespace sys {
  export interface SystemObject extends schema.$Object {}
  export interface ExternalObject extends SystemObject {}
  export interface Branch extends ExternalObject, schema.AnnotationSubject {
    "name": string;
    "last_migration"?: string | null;
  }
  export interface Database extends Branch {}
  export interface ExtensionPackage extends SystemObject, schema.AnnotationSubject {
    "script": string;
    "version": {major: number, minor: number, stage: VersionStage, stage_no: number, local: string[]};
  }
  export interface ExtensionPackageMigration extends SystemObject, schema.AnnotationSubject {
    "script": string;
    "from_version": {major: number, minor: number, stage: VersionStage, stage_no: number, local: string[]};
    "to_version": {major: number, minor: number, stage: VersionStage, stage_no: number, local: string[]};
  }
  export type OutputFormat = "BINARY" | "JSON" | "JSON_ELEMENTS" | "NONE";
  export interface QueryStats extends ExternalObject {
    "stats_since"?: Date | null;
    "minmax_stats_since"?: Date | null;
    "query"?: string | null;
    "query_type"?: QueryType | null;
    "tag"?: string | null;
    "compilation_config"?: unknown | null;
    "protocol_version"?: {major: number, minor: number} | null;
    "default_namespace"?: string | null;
    "namespace_aliases"?: unknown | null;
    "output_format"?: OutputFormat | null;
    "expect_one"?: boolean | null;
    "implicit_limit"?: number | null;
    "inline_typeids"?: boolean | null;
    "inline_typenames"?: boolean | null;
    "inline_objectids"?: boolean | null;
    "plans"?: number | null;
    "total_plan_time"?: gel.Duration | null;
    "min_plan_time"?: gel.Duration | null;
    "max_plan_time"?: gel.Duration | null;
    "mean_plan_time"?: gel.Duration | null;
    "stddev_plan_time"?: gel.Duration | null;
    "calls"?: number | null;
    "total_exec_time"?: gel.Duration | null;
    "min_exec_time"?: gel.Duration | null;
    "max_exec_time"?: gel.Duration | null;
    "mean_exec_time"?: gel.Duration | null;
    "stddev_exec_time"?: gel.Duration | null;
    "rows"?: number | null;
    "branch"?: Branch | null;
  }
  export type QueryType = "EdgeQL" | "SQL";
  export interface Role extends SystemObject, schema.InheritingObject, schema.AnnotationSubject {
    "name": string;
    "superuser": boolean;
    "is_superuser": boolean;
    "password"?: string | null;
    "permissions": string[];
    "branches": string[];
    "all_permissions": string[];
    "member_of": Role[];
  }
  export type TransactionAccessMode = "ReadOnly" | "ReadWrite";
  export type TransactionDeferrability = "Deferrable" | "NotDeferrable";
  export type TransactionIsolation = "RepeatableRead" | "Serializable";
  export type VersionStage = "dev" | "alpha" | "beta" | "rc" | "final";
}
export namespace $default {
  export interface CreatedAt extends std.$Object {
    "created_at": Date;
  }
  export interface Auditable extends CreatedAt {
    "updated_at": Date;
  }
  export interface Timed extends CreatedAt {
    "ends_at"?: Date | null;
    "duration": gel.Duration;
  }
  export interface user extends users.User {}
}
export type CreatedAt = $default.CreatedAt;
export type Auditable = $default.Auditable;
export type Timed = $default.Timed;
export type user = $default.user;
export namespace users {
  export interface User extends $default.Auditable {
    "first_name": string;
    "last_name"?: string | null;
    "display_name": string;
    "email": string;
    "organisational_unit": string;
    "profile_picture"?: string | null;
    "pronouns"?: string | null;
    "ucard_number": number;
    "username": string;
    "roles": Role[];
    "identity": ext.auth.Identity;
    "agreements_signed": sign_in.Agreement[];
    "infractions": Infraction[];
    "mailing_list_subscriptions": notification.MailingList[];
    "notifications": notification.Notification[];
    "training": training.Training[];
    "sign_ins": sign_in.SignIn[];
    "bookings": tools.Booking[];
  }
  export interface Infraction extends $default.CreatedAt {
    "duration"?: gel.Duration | null;
    "ends_at"?: Date | null;
    "reason": string;
    "resolved": boolean;
    "type": InfractionType;
    "user": User;
  }
  export type InfractionType = "WARNING" | "TEMP_BAN" | "PERM_BAN" | "RESTRICTION" | "TRAINING_ISSUE";
  export interface Integration extends $default.Auditable {
    "external_id": string;
    "platform": Platform;
    "external_email": string;
    "user": User;
  }
  export type Platform = "DISCORD" | "GITHUB";
  export interface Rep extends User {
    "status": RepStatus;
    "teams": team.Team[];
    "supervisable_training": training.Training[];
  }
  export type RepStatus = "ACTIVE" | "BREAK" | "ALUMNI" | "FUTURE" | "REMOVED";
  export interface Role extends std.$Object {
    "name": string;
  }
  export interface SettingTemplate extends std.$Object {
    "key": string;
    "default_value": string;
  }
  export interface UserSettingValue extends std.$Object {
    "value": string;
    "template": SettingTemplate;
    "user": User;
  }
}
export namespace ext {
  export namespace auth {
    export interface ProviderConfig extends cfg.ConfigObject {
      "name": string;
    }
    export interface OAuthProviderConfig extends ProviderConfig {
      "name": string;
      "secret": string;
      "client_id": string;
      "display_name": string;
      "additional_scope"?: string | null;
    }
    export interface AppleOAuthProvider extends OAuthProviderConfig {
      "name": string;
      "display_name": string;
    }
    export interface Auditable extends std.BaseObject {
      "created_at": Date;
      "modified_at": Date;
    }
    export interface AuthConfig extends cfg.ExtensionConfig {
      "app_name"?: string | null;
      "logo_url"?: string | null;
      "dark_logo_url"?: string | null;
      "brand_color"?: string | null;
      "auth_signing_key"?: string | null;
      "token_time_to_live"?: gel.Duration | null;
      "allowed_redirect_urls": string[];
      "providers": ProviderConfig[];
      "ui"?: UIConfig | null;
      "webhooks": WebhookConfig[];
    }
    export interface AzureOAuthProvider extends OAuthProviderConfig {
      "name": string;
      "display_name": string;
    }
    export interface Identity extends Auditable {
      "issuer": string;
      "subject": string;
    }
    export interface ClientTokenIdentity extends Identity {}
    export interface DiscordOAuthProvider extends OAuthProviderConfig {
      "name": string;
      "display_name": string;
    }
    export interface Factor extends Auditable {
      "identity": LocalIdentity;
    }
    export interface EmailFactor extends Factor {
      "email": string;
      "verified_at"?: Date | null;
    }
    export interface EmailPasswordFactor extends EmailFactor {
      "email": string;
      "password_hash": string;
    }
    export interface EmailPasswordProviderConfig extends ProviderConfig {
      "name": string;
      "require_verification": boolean;
    }
    export type FlowType = "PKCE" | "Implicit";
    export interface GitHubOAuthProvider extends OAuthProviderConfig {
      "name": string;
      "display_name": string;
    }
    export interface GoogleOAuthProvider extends OAuthProviderConfig {
      "name": string;
      "display_name": string;
    }
    export type JWTAlgo = "RS256" | "HS256";
    export interface LocalIdentity extends Identity {
      "subject": string;
    }
    export interface MagicLinkFactor extends EmailFactor {
      "email": string;
    }
    export interface MagicLinkProviderConfig extends ProviderConfig {
      "name": string;
      "token_time_to_live": gel.Duration;
    }
    export interface OpenIDConnectProvider extends OAuthProviderConfig {
      "name": string;
      "display_name": string;
      "issuer_url": string;
      "logo_url"?: string | null;
    }
    export interface PKCEChallenge extends Auditable {
      "challenge": string;
      "auth_token"?: string | null;
      "refresh_token"?: string | null;
      "id_token"?: string | null;
      "identity"?: Identity | null;
    }
    export interface SlackOAuthProvider extends OAuthProviderConfig {
      "name": string;
      "display_name": string;
    }
    export interface UIConfig extends cfg.ConfigObject {
      "redirect_to": string;
      "redirect_to_on_signup"?: string | null;
      "flow_type": FlowType;
      "app_name"?: string | null;
      "logo_url"?: string | null;
      "dark_logo_url"?: string | null;
      "brand_color"?: string | null;
    }
    export interface WebAuthnAuthenticationChallenge extends Auditable {
      "challenge": Uint8Array;
      "factors": WebAuthnFactor[];
    }
    export interface WebAuthnFactor extends EmailFactor {
      "user_handle": Uint8Array;
      "credential_id": Uint8Array;
      "public_key": Uint8Array;
    }
    export interface WebAuthnProviderConfig extends ProviderConfig {
      "name": string;
      "relying_party_origin": string;
      "require_verification": boolean;
    }
    export interface WebAuthnRegistrationChallenge extends Auditable {
      "challenge": Uint8Array;
      "email": string;
      "user_handle": Uint8Array;
    }
    export interface WebhookConfig extends cfg.ConfigObject {
      "url": string;
      "events": WebhookEvent[];
      "signing_secret_key"?: string | null;
    }
    export type WebhookEvent = "IdentityCreated" | "IdentityAuthenticated" | "EmailFactorCreated" | "EmailVerified" | "EmailVerificationRequested" | "PasswordResetRequested" | "MagicLinkRequested";
  }
  export namespace ai {
    export interface Model extends std.BaseObject {}
    export interface TextGenerationModel extends Model {}
    export interface AnthropicClaude3HaikuModel extends TextGenerationModel {}
    export interface AnthropicClaude3OpusModel extends TextGenerationModel {}
    export interface AnthropicClaude3SonnetModel extends TextGenerationModel {}
    export interface AnthropicClaude_3_5_HaikuModel extends TextGenerationModel {}
    export interface AnthropicClaude_3_5_SonnetModel extends TextGenerationModel {}
    export interface ProviderConfig extends cfg.ConfigObject {
      "name": string;
      "display_name": string;
      "api_url": string;
      "client_id"?: string | null;
      "secret": string;
      "api_style": ProviderAPIStyle;
    }
    export interface AnthropicProviderConfig extends ProviderConfig {
      "name": string;
      "display_name": string;
      "api_url": string;
      "api_style": ProviderAPIStyle;
    }
    export type ChatParticipantRole = "System" | "User" | "Assistant" | "Tool";
    export interface ChatPrompt extends std.BaseObject {
      "name": string;
      "messages": ChatPromptMessage[];
    }
    export interface ChatPromptMessage extends std.BaseObject {
      "participant_role": ChatParticipantRole;
      "participant_name"?: string | null;
      "content": string;
    }
    export interface CodestralMamba extends TextGenerationModel {}
    export interface CodestralModel extends TextGenerationModel {}
    export interface Config extends cfg.ExtensionConfig {
      "indexer_naptime": gel.Duration;
      "providers": ProviderConfig[];
    }
    export interface CustomProviderConfig extends ProviderConfig {
      "display_name": string;
      "api_style": ProviderAPIStyle;
    }
    export type DistanceFunction = "Cosine" | "InnerProduct" | "L2";
    export interface EmbeddingModel extends Model {}
    export type IndexType = "HNSW";
    export interface Ministral_3B_Model extends TextGenerationModel {}
    export interface Ministral_8B_Model extends TextGenerationModel {}
    export interface MistralEmbedModel extends EmbeddingModel {}
    export interface MistralLargeModel extends TextGenerationModel {}
    export interface MistralMediumModel extends TextGenerationModel {}
    export interface MistralNemo extends TextGenerationModel {}
    export interface MistralProviderConfig extends ProviderConfig {
      "name": string;
      "display_name": string;
      "api_url": string;
      "api_style": ProviderAPIStyle;
    }
    export interface MistralSmallModel extends TextGenerationModel {}
    export interface OllamaBgeM3Model extends EmbeddingModel {}
    export interface OllamaLlama_3_2_Model extends TextGenerationModel {}
    export interface OllamaLlama_3_3_Model extends TextGenerationModel {}
    export interface OllamaNomicEmbedTextModel extends EmbeddingModel {}
    export interface OllamaProviderConfig extends ProviderConfig {
      "name": string;
      "display_name": string;
      "api_url": string;
      "secret": string;
      "api_style": ProviderAPIStyle;
    }
    export interface OpenAIGPT_3_5_TurboModel extends TextGenerationModel {}
    export interface OpenAIGPT_4_Model extends TextGenerationModel {}
    export interface OpenAIGPT_4_TurboModel extends TextGenerationModel {}
    export interface OpenAIGPT_4_TurboPreviewModel extends TextGenerationModel {}
    export interface OpenAIGPT_4o_MiniModel extends TextGenerationModel {}
    export interface OpenAIGPT_4o_Model extends TextGenerationModel {}
    export interface OpenAIProviderConfig extends ProviderConfig {
      "name": string;
      "display_name": string;
      "api_url": string;
      "api_style": ProviderAPIStyle;
    }
    export interface OpenAITextEmbedding3LargeModel extends EmbeddingModel {}
    export interface OpenAITextEmbedding3SmallModel extends EmbeddingModel {}
    export interface OpenAITextEmbeddingAda002Model extends EmbeddingModel {}
    export interface OpenAI_O1_MiniModel extends TextGenerationModel {}
    export interface OpenAI_O1_PreviewModel extends TextGenerationModel {}
    export interface PixtralLargeModel extends TextGenerationModel {}
    export interface PixtralModel extends TextGenerationModel {}
    export type ProviderAPIStyle = "OpenAI" | "Anthropic" | "Ollama";
  }
  export namespace pg_trgm {
    export interface Config extends cfg.ExtensionConfig {
      "similarity_threshold": number;
      "word_similarity_threshold": number;
      "strict_word_similarity_threshold": number;
    }
  }
  export namespace pgvector {
    export interface Config extends cfg.ExtensionConfig {
      "probes": number;
      "ef_search": number;
    }
  }
}
export namespace sign_in {
  export interface Agreement extends $default.Auditable {
    "content": string;
    "_content_hash": Uint8Array;
    "version": number;
    "name": string;
    "reasons": Reason[];
  }
  export interface Location extends $default.Auditable {
    "closing_time": gel.LocalTime;
    "opening_days": number[];
    "opening_time": gel.LocalTime;
    "out_of_hours": boolean;
    "name": LocationName;
    "max_users": number;
    "out_of_hours_rep_multiplier": number;
    "queue_enabled": boolean;
    "in_hours_rep_multiplier": number;
    "queue_in_use": boolean;
    "status": LocationStatus;
    "can_sign_in": boolean;
    "max_count": number;
    "available_capacity": number;
    "queued": QueuePlace[];
    "queued_users_that_can_sign_in": users.User[];
    "sign_ins": SignIn[];
    "on_shift_reps": users.Rep[];
    "off_shift_reps": users.Rep[];
    "supervising_reps": users.Rep[];
    "supervisable_training": training.Training[];
  }
  export type LocationName = "MAINSPACE" | "HEARTSPACE";
  export type LocationStatus = "OPEN" | "SOON" | "CLOSED";
  export interface QueuePlace extends $default.CreatedAt {
    "notified_at"?: Date | null;
    "ends_at"?: Date | null;
    "location": Location;
    "user": users.User;
  }
  export interface Reason extends $default.CreatedAt {
    "category": ReasonCategory;
    "name": string;
    "agreement"?: Agreement | null;
  }
  export type ReasonCategory = "UNIVERSITY_MODULE" | "CO_CURRICULAR_GROUP" | "PERSONAL_PROJECT" | "SOCIETY" | "REP_SIGN_IN" | "EVENT";
  export interface SignIn extends $default.Timed {
    "tools": string[];
    "signed_out": boolean;
    "location": Location;
    "reason": Reason;
    "user": users.User;
  }
  export interface UserRegistration extends $default.CreatedAt {
    "location": Location;
    "user": users.User;
  }
}
export namespace notification {
  export interface AllTarget extends std.$Object {
    "target": AllTargetTarget;
  }
  export type AllTargetTarget = "ALL" | "REPS";
  export interface Notification extends $default.Auditable {
    "content": string;
    "delivery_method": DeliveryMethod[];
    "dispatched_at": Date;
    "priority": number;
    "status": Status;
    "title": string;
    "type": Type;
    "target": users.User | team.Team | event.Event | AllTarget | MailingList[];
  }
  export interface AuthoredNotification extends Notification {
    "approved_on"?: Date | null;
    "approved_by"?: users.Rep | null;
    "author": users.User;
  }
  export type DeliveryMethod = "BANNER" | "EMAIL" | "TRAY" | "POPUP" | "DISCORD";
  export interface MailingList extends $default.Auditable {
    "description": string;
    "name": string;
    "subscribers": users.User[];
  }
  export type Status = "DRAFT" | "REVIEW" | "QUEUED" | "SENDING" | "SENT" | "ERRORED";
  export interface SystemNotification extends Notification {
    "source": string;
  }
  export type Type = "ADMIN" | "ADVERT" | "ANNOUNCEMENT" | "EVENT" | "HEALTH_AND_SAFETY" | "INFRACTION" | "PRINTING" | "QUEUE_SLOT_ACTIVE" | "RECRUITMENT" | "REFERRAL" | "REMINDER" | "TRAINING";
}
export namespace training {
  export interface Answer extends std.$Object {
    "content": string;
    "correct": boolean;
    "description"?: string | null;
  }
  export type AnswerType = "SINGLE" | "MULTI";
  export interface Interactable extends std.$Object {
    "content": string;
    "enabled": boolean;
    "index": number;
    "parent": Training;
  }
  export type LocationName = "MAINSPACE" | "HEARTSPACE" | "GEORGE_PORTER";
  export interface TrainingPage extends Interactable {
    "duration"?: gel.Duration | null;
    "name": string;
  }
  export interface Page extends TrainingPage {}
  export interface Question extends Interactable {
    "type": AnswerType;
    "answers": Answer[];
  }
  export interface Session extends $default.Auditable {
    "index": number;
    "training": Training;
    "next_section"?: TrainingPage | Question | null;
    "user": users.User;
  }
  export interface Training extends $default.Auditable {
    "in_person": boolean;
    "locations": LocationName[];
    "name": string;
    "compulsory": boolean;
    "description": string;
    "enabled": boolean;
    "expires_after"?: gel.Duration | null;
    "icon_url"?: string | null;
    "training_lockout"?: gel.Duration | null;
    "rep"?: Training | null;
    "pages": TrainingPage[];
    "questions": Question[];
    "sections": TrainingPage | Question[];
  }
}
export namespace tools {
  export interface Booking extends $default.Auditable {
    "ends_at": Date;
    "starts_at": Date;
    "duration": gel.Duration;
    "cancelled"?: boolean | null;
    "user": users.User;
    "tool": Tool;
  }
  export type Selectability = "UNTRAINED" | "REVOKED" | "EXPIRED" | "REPS_UNTRAINED" | "IN_PERSON_MISSING";
  export type Status = "NOMINAL" | "IN_USE" | "OUT_OF_ORDER";
  export interface Tool extends std.$Object {
    "min_booking_time"?: gel.Duration | null;
    "max_booking_daily"?: gel.Duration | null;
    "max_booking_weekly"?: gel.Duration | null;
    "name": string;
    "quantity": number;
    "is_bookable": boolean;
    "status": Status;
    "rep": training.Training;
    "location": sign_in.Location;
    "training": training.Training[];
    "bookings": Booking[];
  }
}
export namespace event {
  export interface Event extends $default.CreatedAt {
    "type": Type;
    "ends_at"?: Date | null;
    "starts_at": Date;
    "title": string;
    "description": string;
    "organiser": users.User[];
    "attendees": users.User[];
    "interested": users.User[];
  }
  export type Type = "WORKSHOP" | "LECTURE" | "MEETUP" | "HACKATHON" | "EXHIBITION" | "WEBINAR";
}
export namespace team {
  export type Name = "IT" | "3DP" | "Hardware" | "Publicity" | "Events" | "Relations" | "Operations" | "Recruitment & Development" | "Health & Safety" | "Inclusions" | "Unsorted Reps" | "Future Reps" | "Staff";
  export interface Team extends std.$Object {
    "description": string;
    "name": string;
    "all_members": users.Rep[];
    "members": users.Rep[];
  }
}
export namespace printing {
  export interface AuditEntry extends $default.CreatedAt {
    "status": PrintStatus | PrinterStatus;
    "printer": Printer;
  }
  export interface Print extends std.$Object {
    "stl_path": string;
    "gcode_path": string;
    "duration": gel.Duration;
    "mass": number;
    "name": string;
    "type": Type;
    "approved_by": users.Rep;
    "author": users.User;
    "on": PrintHistory[];
  }
  export interface PrintAuditEntry extends AuditEntry {
    "status": PrintStatus;
    "print": Print;
  }
  export interface PrintHistory extends $default.CreatedAt {
    "printer": Printer;
    "status": PrintStatus;
  }
  export interface PrintStatus extends std.$Object {}
  export interface Printer extends std.$Object {
    "name": string;
    "remote_ip": string;
    "type": Type[];
    "location": sign_in.Location;
    "status": PrinterStatus;
    "prints": Print[];
  }
  export interface PrinterAuditEntry extends AuditEntry {
    "status": PrinterStatus;
  }
  export interface PrinterStatus extends std.$Object {}
  export type Type = "PLA" | "TPU" | "PETG" | "RESIN";
  export namespace print_status {
    export interface Cancelled extends printing.PrintStatus {}
    export interface Complete extends printing.PrintStatus {}
    export interface Failed extends printing.PrintStatus {
      "note"?: string | null;
      "reason": FailureReason;
    }
    export type FailureReason = "NO_EXTRUSION_AT_PRINT_START" | "POOR_BED_ADHESION" | "UNDER_EXTRUSION" | "OVER_EXTRUSION" | "GAPS_IN_TOP_LAYERS" | "STRINGING_AND_OOZING" | "OVERHEATING" | "LAYER_SHIFTING" | "LAYER_SEPARATION_AND_SPLITTING" | "FILAMENT_GRINDING" | "EXTRUDER_CLOG" | "EXTRUSION_STOPS_MID_PRINT" | "WEAK_INFILL" | "BLOBS_AND_ZITS" | "GAPS_BETWEEN_INFILL_AND_PERIMETER" | "CORNER_CURLING_AND_ROUGHNESS" | "TOP_SURFACE_SCARRING" | "CORNER_GAPS_IN_BOTTOM_LAYER" | "LAYER_LINES_ON_SIDES" | "VIBRATION_AND_RINGING" | "THIN_WALL_GAPS" | "SMALL_FEATURE_LOSS" | "INCONSISTENT_EXTRUSION" | "WARPING" | "POOR_OVERHANG_QUALITY" | "DIMENSIONAL_INACCURACY" | "POOR_BRIDGING" | "FILAMENT_FEEDING" | "FILAMENT_RAN_OUT" | "NOT_A_CLUE";
    export interface Printing extends printing.PrintStatus {
      "print": printing.Print;
    }
    export interface Queued extends printing.PrintStatus {}
  }
  export namespace printer_status {
    export interface Disabled extends printing.PrinterStatus {}
    export interface Disconnected extends printing.PrinterStatus {}
    export interface Failed extends printing.PrinterStatus {
      "note": string;
      "reason": FailureReason;
    }
    export type FailureReason = "MAIN_CONTROLLER_BOARD" | "POWER_SUPPLY" | "DISPLAY_BOARD" | "WIFI_MODULE" | "HOTEND_THERMISTOR" | "HEATBED_THERMISTOR" | "HOTEND_HEATER_CARTRIDGE" | "HEATBED_HEATING_ELEMENT" | "HEATER_BLOCK" | "EXTRUDER_MOTOR" | "X_AXIS_MOTOR" | "Y_AXIS_MOTOR" | "Z_AXIS_MOTOR" | "LINEAR_RAILS" | "LINEAR_BEARINGS" | "BELT_SYSTEM" | "PULLEYS" | "LEAD_SCREW_NUT" | "HOTEND_FAN" | "PART_COOLING_FAN" | "CHAMBER_FAN" | "POWER_SUPPLY_FAN" | "NOZZLE" | "HEAT_BREAK" | "HEAT_SINK" | "EXTRUDER_GEARS" | "BOWDEN_TUBE" | "FILAMENT_SENSOR" | "BED_LEVELING_SENSOR" | "DOOR_SENSOR" | "CRASH_DETECTION_SENSOR" | "POWER_PANIC_SENSOR" | "PRINT_BED_SURFACE" | "BED_LEVELLING_SPRINGS" | "BED_MOUNTING_HARDWARE" | "HOTEND_WIRING" | "HEATBED_WIRING" | "MOTOR_WIRING" | "MAIN_POWER_CABLE" | "USB_CONNECTION" | "FRAME_COMPONENTS" | "SMOOTH_RODS" | "ENCLOSURE_PANELS" | "FILAMENT_FEEDING";
    export interface Idle extends printing.PrinterStatus {}
    export interface Printing extends printing.PrinterStatus {
      "print": printing.Print;
    }
  }
}
export namespace schema {
  export type AccessKind = "Select" | "UpdateRead" | "UpdateWrite" | "Delete" | "Insert";
  export interface $Object extends std.BaseObject {
    "name": string;
    "internal": boolean;
    "builtin": boolean;
    "computed_fields"?: string[] | null;
  }
  export interface SubclassableObject extends $Object {
    "abstract"?: boolean | null;
    "is_abstract"?: boolean | null;
    "final": boolean;
    "is_final": boolean;
  }
  export interface InheritingObject extends SubclassableObject {
    "inherited_fields"?: string[] | null;
    "bases": InheritingObject[];
    "ancestors": InheritingObject[];
  }
  export interface AnnotationSubject extends $Object {
    "annotations": Annotation[];
  }
  export interface AccessPolicy extends InheritingObject, AnnotationSubject {
    "access_kinds": AccessKind[];
    "condition"?: string | null;
    "action": AccessPolicyAction;
    "expr"?: string | null;
    "errmessage"?: string | null;
    "subject": ObjectType;
  }
  export type AccessPolicyAction = "Allow" | "Deny";
  export interface Alias extends AnnotationSubject {
    "expr": string;
    "type"?: Type | null;
  }
  export interface Annotation extends InheritingObject, AnnotationSubject {
    "inheritable"?: boolean | null;
  }
  export interface Type extends SubclassableObject, AnnotationSubject {
    "expr"?: string | null;
    "from_alias"?: boolean | null;
    "is_from_alias"?: boolean | null;
  }
  export interface PrimitiveType extends Type {}
  export interface CollectionType extends PrimitiveType {}
  export interface Array extends CollectionType {
    "dimensions"?: number[] | null;
    "element_type": Type;
  }
  export interface ArrayExprAlias extends Array {}
  export interface CallableObject extends AnnotationSubject {
    "return_typemod"?: TypeModifier | null;
    "params": Parameter[];
    "return_type"?: Type | null;
  }
  export type Cardinality = "One" | "Many";
  export interface VolatilitySubject extends $Object {
    "volatility"?: Volatility | null;
  }
  export interface Cast extends AnnotationSubject, VolatilitySubject {
    "allow_implicit"?: boolean | null;
    "allow_assignment"?: boolean | null;
    "from_type"?: Type | null;
    "to_type"?: Type | null;
  }
  export interface ConsistencySubject extends InheritingObject, AnnotationSubject {
    "constraints": Constraint[];
  }
  export interface Constraint extends CallableObject, InheritingObject {
    "expr"?: string | null;
    "subjectexpr"?: string | null;
    "finalexpr"?: string | null;
    "errmessage"?: string | null;
    "delegated"?: boolean | null;
    "except_expr"?: string | null;
    "subject"?: ConsistencySubject | null;
    "params": Parameter[];
  }
  export interface Delta extends $Object {
    "parents": Delta[];
  }
  export interface Extension extends AnnotationSubject, $Object {
    "package": sys.ExtensionPackage;
  }
  export interface Function extends CallableObject, VolatilitySubject {
    "preserves_optionality"?: boolean | null;
    "body"?: string | null;
    "language": string;
    "used_globals": Global[];
    "used_permissions": Permission[];
    "required_permissions": Permission[];
  }
  export interface FutureBehavior extends $Object {}
  export interface Global extends AnnotationSubject {
    "required"?: boolean | null;
    "cardinality"?: Cardinality | null;
    "expr"?: string | null;
    "default"?: string | null;
    "target"?: Type | null;
  }
  export interface Index extends InheritingObject, AnnotationSubject {
    "expr"?: string | null;
    "except_expr"?: string | null;
    "deferrability"?: IndexDeferrability | null;
    "deferred"?: boolean | null;
    "active"?: boolean | null;
    "build_concurrently"?: boolean | null;
    "kwargs"?: {name: string, expr: string}[] | null;
    "params": Parameter[];
  }
  export type IndexDeferrability = "Prohibited" | "Permitted" | "Required";
  export interface Pointer extends ConsistencySubject, AnnotationSubject {
    "cardinality"?: Cardinality | null;
    "required"?: boolean | null;
    "readonly"?: boolean | null;
    "default"?: string | null;
    "expr"?: string | null;
    "secret"?: boolean | null;
    "splat_strategy"?: SplatStrategy | null;
    "linkful"?: boolean | null;
    "source"?: Source | null;
    "target"?: Type | null;
    "rewrites": Rewrite[];
  }
  export interface Source extends $Object {
    "pointers": Pointer[];
    "indexes": Index[];
  }
  export interface Link extends Pointer, Source {
    "on_target_delete"?: TargetDeleteAction | null;
    "on_source_delete"?: SourceDeleteAction | null;
    "target"?: ObjectType | null;
    "properties": Property[];
  }
  export interface Migration extends AnnotationSubject, $Object {
    "message"?: string | null;
    "script": string;
    "sdl"?: string | null;
    "generated_by"?: MigrationGeneratedBy | null;
    "parents": Migration[];
  }
  export type MigrationGeneratedBy = "DevMode" | "DDLStatement";
  export interface Module extends AnnotationSubject, $Object {}
  export interface MultiRange extends CollectionType {
    "element_type": Type;
  }
  export interface MultiRangeExprAlias extends MultiRange {}
  export interface ObjectType extends Source, ConsistencySubject, InheritingObject, Type, AnnotationSubject {
    "compound_type": boolean;
    "is_compound_type": boolean;
    "union_of": ObjectType[];
    "intersection_of": ObjectType[];
    "links": Link[];
    "properties": Property[];
    "access_policies": AccessPolicy[];
    "triggers": Trigger[];
  }
  export interface Operator extends CallableObject, VolatilitySubject {
    "operator_kind"?: OperatorKind | null;
    "is_abstract"?: boolean | null;
    "abstract"?: boolean | null;
  }
  export type OperatorKind = "Infix" | "Postfix" | "Prefix" | "Ternary";
  export interface Parameter extends $Object {
    "typemod": TypeModifier;
    "kind": ParameterKind;
    "num": number;
    "default"?: string | null;
    "type": Type;
  }
  export type ParameterKind = "VariadicParam" | "NamedOnlyParam" | "PositionalParam";
  export interface Permission extends AnnotationSubject {}
  export interface Property extends Pointer {}
  export interface PseudoType extends InheritingObject, Type {}
  export interface Range extends CollectionType {
    "element_type": Type;
  }
  export interface RangeExprAlias extends Range {}
  export interface Rewrite extends InheritingObject, AnnotationSubject {
    "kind": TriggerKind;
    "expr": string;
    "subject": Pointer;
  }
  export type RewriteKind = "Update" | "Insert";
  export interface ScalarType extends PrimitiveType, ConsistencySubject, AnnotationSubject {
    "default"?: string | null;
    "enum_values"?: string[] | null;
    "arg_values"?: string[] | null;
  }
  export type SourceDeleteAction = "DeleteTarget" | "Allow" | "DeleteTargetIfOrphan";
  export type SplatStrategy = "Default" | "Explicit" | "Implicit";
  export type TargetDeleteAction = "Restrict" | "DeleteSource" | "Allow" | "DeferredRestrict";
  export interface Trigger extends InheritingObject, AnnotationSubject {
    "condition"?: string | null;
    "timing": TriggerTiming;
    "kinds": TriggerKind[];
    "scope": TriggerScope;
    "expr"?: string | null;
    "subject": ObjectType;
  }
  export type TriggerKind = "Update" | "Delete" | "Insert";
  export type TriggerScope = "All" | "Each";
  export type TriggerTiming = "After" | "AfterCommitOf";
  export interface Tuple extends CollectionType {
    "named": boolean;
    "element_types": TupleElement[];
  }
  export interface TupleElement extends std.BaseObject {
    "name"?: string | null;
    "type": Type;
  }
  export interface TupleExprAlias extends Tuple {}
  export type TypeModifier = "SetOfType" | "OptionalType" | "SingletonType";
  export type Volatility = "Immutable" | "Stable" | "Volatile" | "Modifying";
}
export interface types {
  "std": {
    "BaseObject": std.BaseObject;
    "Object": std.$Object;
    "Endian": std.Endian;
    "FreeObject": std.FreeObject;
    "JsonEmpty": std.JsonEmpty;
    "enc": {
      "Base64Alphabet": std.enc.Base64Alphabet;
    };
    "fts": {
      "ElasticLanguage": std.fts.ElasticLanguage;
      "Language": std.fts.Language;
      "LuceneLanguage": std.fts.LuceneLanguage;
      "PGLanguage": std.fts.PGLanguage;
      "Weight": std.fts.Weight;
    };
    "net": {
      "RequestFailureKind": std.net.RequestFailureKind;
      "RequestState": std.net.RequestState;
      "http": {
        "Method": std.net.http.Method;
        "Response": std.net.http.Response;
        "ScheduledRequest": std.net.http.ScheduledRequest;
      };
    };
  };
  "ai_rep": {
    "Question": ai_rep.Question;
  };
  "cfg": {
    "ConfigObject": cfg.ConfigObject;
    "AbstractConfig": cfg.AbstractConfig;
    "AllowBareDDL": cfg.AllowBareDDL;
    "Auth": cfg.Auth;
    "AuthMethod": cfg.AuthMethod;
    "DatabaseConfig": cfg.DatabaseConfig;
    "BranchConfig": cfg.BranchConfig;
    "Config": cfg.Config;
    "ConnectionTransport": cfg.ConnectionTransport;
    "EmailProviderConfig": cfg.EmailProviderConfig;
    "ExtensionConfig": cfg.ExtensionConfig;
    "InstanceConfig": cfg.InstanceConfig;
    "JWT": cfg.JWT;
    "Password": cfg.Password;
    "QueryCacheMode": cfg.QueryCacheMode;
    "QueryStatsOption": cfg.QueryStatsOption;
    "SCRAM": cfg.SCRAM;
    "SMTPProviderConfig": cfg.SMTPProviderConfig;
    "SMTPSecurity": cfg.SMTPSecurity;
    "StoreMigrationSDL": cfg.StoreMigrationSDL;
    "Trust": cfg.Trust;
    "mTLS": cfg.mTLS;
  };
  "sys": {
    "SystemObject": sys.SystemObject;
    "ExternalObject": sys.ExternalObject;
    "Branch": sys.Branch;
    "Database": sys.Database;
    "ExtensionPackage": sys.ExtensionPackage;
    "ExtensionPackageMigration": sys.ExtensionPackageMigration;
    "OutputFormat": sys.OutputFormat;
    "QueryStats": sys.QueryStats;
    "QueryType": sys.QueryType;
    "Role": sys.Role;
    "TransactionAccessMode": sys.TransactionAccessMode;
    "TransactionDeferrability": sys.TransactionDeferrability;
    "TransactionIsolation": sys.TransactionIsolation;
    "VersionStage": sys.VersionStage;
  };
  "default": {
    "CreatedAt": $default.CreatedAt;
    "Auditable": $default.Auditable;
    "Timed": $default.Timed;
    "user": $default.user;
  };
  "users": {
    "User": users.User;
    "Infraction": users.Infraction;
    "InfractionType": users.InfractionType;
    "Integration": users.Integration;
    "Platform": users.Platform;
    "Rep": users.Rep;
    "RepStatus": users.RepStatus;
    "Role": users.Role;
    "SettingTemplate": users.SettingTemplate;
    "UserSettingValue": users.UserSettingValue;
  };
  "ext": {
    "auth": {
      "ProviderConfig": ext.auth.ProviderConfig;
      "OAuthProviderConfig": ext.auth.OAuthProviderConfig;
      "AppleOAuthProvider": ext.auth.AppleOAuthProvider;
      "Auditable": ext.auth.Auditable;
      "AuthConfig": ext.auth.AuthConfig;
      "AzureOAuthProvider": ext.auth.AzureOAuthProvider;
      "Identity": ext.auth.Identity;
      "ClientTokenIdentity": ext.auth.ClientTokenIdentity;
      "DiscordOAuthProvider": ext.auth.DiscordOAuthProvider;
      "Factor": ext.auth.Factor;
      "EmailFactor": ext.auth.EmailFactor;
      "EmailPasswordFactor": ext.auth.EmailPasswordFactor;
      "EmailPasswordProviderConfig": ext.auth.EmailPasswordProviderConfig;
      "FlowType": ext.auth.FlowType;
      "GitHubOAuthProvider": ext.auth.GitHubOAuthProvider;
      "GoogleOAuthProvider": ext.auth.GoogleOAuthProvider;
      "JWTAlgo": ext.auth.JWTAlgo;
      "LocalIdentity": ext.auth.LocalIdentity;
      "MagicLinkFactor": ext.auth.MagicLinkFactor;
      "MagicLinkProviderConfig": ext.auth.MagicLinkProviderConfig;
      "OpenIDConnectProvider": ext.auth.OpenIDConnectProvider;
      "PKCEChallenge": ext.auth.PKCEChallenge;
      "SlackOAuthProvider": ext.auth.SlackOAuthProvider;
      "UIConfig": ext.auth.UIConfig;
      "WebAuthnAuthenticationChallenge": ext.auth.WebAuthnAuthenticationChallenge;
      "WebAuthnFactor": ext.auth.WebAuthnFactor;
      "WebAuthnProviderConfig": ext.auth.WebAuthnProviderConfig;
      "WebAuthnRegistrationChallenge": ext.auth.WebAuthnRegistrationChallenge;
      "WebhookConfig": ext.auth.WebhookConfig;
      "WebhookEvent": ext.auth.WebhookEvent;
    };
    "ai": {
      "Model": ext.ai.Model;
      "TextGenerationModel": ext.ai.TextGenerationModel;
      "AnthropicClaude3HaikuModel": ext.ai.AnthropicClaude3HaikuModel;
      "AnthropicClaude3OpusModel": ext.ai.AnthropicClaude3OpusModel;
      "AnthropicClaude3SonnetModel": ext.ai.AnthropicClaude3SonnetModel;
      "AnthropicClaude_3_5_HaikuModel": ext.ai.AnthropicClaude_3_5_HaikuModel;
      "AnthropicClaude_3_5_SonnetModel": ext.ai.AnthropicClaude_3_5_SonnetModel;
      "ProviderConfig": ext.ai.ProviderConfig;
      "AnthropicProviderConfig": ext.ai.AnthropicProviderConfig;
      "ChatParticipantRole": ext.ai.ChatParticipantRole;
      "ChatPrompt": ext.ai.ChatPrompt;
      "ChatPromptMessage": ext.ai.ChatPromptMessage;
      "CodestralMamba": ext.ai.CodestralMamba;
      "CodestralModel": ext.ai.CodestralModel;
      "Config": ext.ai.Config;
      "CustomProviderConfig": ext.ai.CustomProviderConfig;
      "DistanceFunction": ext.ai.DistanceFunction;
      "EmbeddingModel": ext.ai.EmbeddingModel;
      "IndexType": ext.ai.IndexType;
      "Ministral_3B_Model": ext.ai.Ministral_3B_Model;
      "Ministral_8B_Model": ext.ai.Ministral_8B_Model;
      "MistralEmbedModel": ext.ai.MistralEmbedModel;
      "MistralLargeModel": ext.ai.MistralLargeModel;
      "MistralMediumModel": ext.ai.MistralMediumModel;
      "MistralNemo": ext.ai.MistralNemo;
      "MistralProviderConfig": ext.ai.MistralProviderConfig;
      "MistralSmallModel": ext.ai.MistralSmallModel;
      "OllamaBgeM3Model": ext.ai.OllamaBgeM3Model;
      "OllamaLlama_3_2_Model": ext.ai.OllamaLlama_3_2_Model;
      "OllamaLlama_3_3_Model": ext.ai.OllamaLlama_3_3_Model;
      "OllamaNomicEmbedTextModel": ext.ai.OllamaNomicEmbedTextModel;
      "OllamaProviderConfig": ext.ai.OllamaProviderConfig;
      "OpenAIGPT_3_5_TurboModel": ext.ai.OpenAIGPT_3_5_TurboModel;
      "OpenAIGPT_4_Model": ext.ai.OpenAIGPT_4_Model;
      "OpenAIGPT_4_TurboModel": ext.ai.OpenAIGPT_4_TurboModel;
      "OpenAIGPT_4_TurboPreviewModel": ext.ai.OpenAIGPT_4_TurboPreviewModel;
      "OpenAIGPT_4o_MiniModel": ext.ai.OpenAIGPT_4o_MiniModel;
      "OpenAIGPT_4o_Model": ext.ai.OpenAIGPT_4o_Model;
      "OpenAIProviderConfig": ext.ai.OpenAIProviderConfig;
      "OpenAITextEmbedding3LargeModel": ext.ai.OpenAITextEmbedding3LargeModel;
      "OpenAITextEmbedding3SmallModel": ext.ai.OpenAITextEmbedding3SmallModel;
      "OpenAITextEmbeddingAda002Model": ext.ai.OpenAITextEmbeddingAda002Model;
      "OpenAI_O1_MiniModel": ext.ai.OpenAI_O1_MiniModel;
      "OpenAI_O1_PreviewModel": ext.ai.OpenAI_O1_PreviewModel;
      "PixtralLargeModel": ext.ai.PixtralLargeModel;
      "PixtralModel": ext.ai.PixtralModel;
      "ProviderAPIStyle": ext.ai.ProviderAPIStyle;
    };
    "pg_trgm": {
      "Config": ext.pg_trgm.Config;
    };
    "pgvector": {
      "Config": ext.pgvector.Config;
    };
  };
  "sign_in": {
    "Agreement": sign_in.Agreement;
    "Location": sign_in.Location;
    "LocationName": sign_in.LocationName;
    "LocationStatus": sign_in.LocationStatus;
    "QueuePlace": sign_in.QueuePlace;
    "Reason": sign_in.Reason;
    "ReasonCategory": sign_in.ReasonCategory;
    "SignIn": sign_in.SignIn;
    "UserRegistration": sign_in.UserRegistration;
  };
  "notification": {
    "AllTarget": notification.AllTarget;
    "AllTargetTarget": notification.AllTargetTarget;
    "Notification": notification.Notification;
    "AuthoredNotification": notification.AuthoredNotification;
    "DeliveryMethod": notification.DeliveryMethod;
    "MailingList": notification.MailingList;
    "Status": notification.Status;
    "SystemNotification": notification.SystemNotification;
    "Type": notification.Type;
  };
  "training": {
    "Answer": training.Answer;
    "AnswerType": training.AnswerType;
    "Interactable": training.Interactable;
    "LocationName": training.LocationName;
    "TrainingPage": training.TrainingPage;
    "Page": training.Page;
    "Question": training.Question;
    "Session": training.Session;
    "Training": training.Training;
  };
  "tools": {
    "Booking": tools.Booking;
    "Selectability": tools.Selectability;
    "Status": tools.Status;
    "Tool": tools.Tool;
  };
  "event": {
    "Event": event.Event;
    "Type": event.Type;
  };
  "team": {
    "Name": team.Name;
    "Team": team.Team;
  };
  "printing": {
    "AuditEntry": printing.AuditEntry;
    "Print": printing.Print;
    "PrintAuditEntry": printing.PrintAuditEntry;
    "PrintHistory": printing.PrintHistory;
    "PrintStatus": printing.PrintStatus;
    "Printer": printing.Printer;
    "PrinterAuditEntry": printing.PrinterAuditEntry;
    "PrinterStatus": printing.PrinterStatus;
    "Type": printing.Type;
    "print_status": {
      "Cancelled": printing.print_status.Cancelled;
      "Complete": printing.print_status.Complete;
      "Failed": printing.print_status.Failed;
      "FailureReason": printing.print_status.FailureReason;
      "Printing": printing.print_status.Printing;
      "Queued": printing.print_status.Queued;
    };
    "printer_status": {
      "Disabled": printing.printer_status.Disabled;
      "Disconnected": printing.printer_status.Disconnected;
      "Failed": printing.printer_status.Failed;
      "FailureReason": printing.printer_status.FailureReason;
      "Idle": printing.printer_status.Idle;
      "Printing": printing.printer_status.Printing;
    };
  };
  "schema": {
    "AccessKind": schema.AccessKind;
    "Object": schema.$Object;
    "SubclassableObject": schema.SubclassableObject;
    "InheritingObject": schema.InheritingObject;
    "AnnotationSubject": schema.AnnotationSubject;
    "AccessPolicy": schema.AccessPolicy;
    "AccessPolicyAction": schema.AccessPolicyAction;
    "Alias": schema.Alias;
    "Annotation": schema.Annotation;
    "Type": schema.Type;
    "PrimitiveType": schema.PrimitiveType;
    "CollectionType": schema.CollectionType;
    "Array": schema.Array;
    "ArrayExprAlias": schema.ArrayExprAlias;
    "CallableObject": schema.CallableObject;
    "Cardinality": schema.Cardinality;
    "VolatilitySubject": schema.VolatilitySubject;
    "Cast": schema.Cast;
    "ConsistencySubject": schema.ConsistencySubject;
    "Constraint": schema.Constraint;
    "Delta": schema.Delta;
    "Extension": schema.Extension;
    "Function": schema.Function;
    "FutureBehavior": schema.FutureBehavior;
    "Global": schema.Global;
    "Index": schema.Index;
    "IndexDeferrability": schema.IndexDeferrability;
    "Pointer": schema.Pointer;
    "Source": schema.Source;
    "Link": schema.Link;
    "Migration": schema.Migration;
    "MigrationGeneratedBy": schema.MigrationGeneratedBy;
    "Module": schema.Module;
    "MultiRange": schema.MultiRange;
    "MultiRangeExprAlias": schema.MultiRangeExprAlias;
    "ObjectType": schema.ObjectType;
    "Operator": schema.Operator;
    "OperatorKind": schema.OperatorKind;
    "Parameter": schema.Parameter;
    "ParameterKind": schema.ParameterKind;
    "Permission": schema.Permission;
    "Property": schema.Property;
    "PseudoType": schema.PseudoType;
    "Range": schema.Range;
    "RangeExprAlias": schema.RangeExprAlias;
    "Rewrite": schema.Rewrite;
    "RewriteKind": schema.RewriteKind;
    "ScalarType": schema.ScalarType;
    "SourceDeleteAction": schema.SourceDeleteAction;
    "SplatStrategy": schema.SplatStrategy;
    "TargetDeleteAction": schema.TargetDeleteAction;
    "Trigger": schema.Trigger;
    "TriggerKind": schema.TriggerKind;
    "TriggerScope": schema.TriggerScope;
    "TriggerTiming": schema.TriggerTiming;
    "Tuple": schema.Tuple;
    "TupleElement": schema.TupleElement;
    "TupleExprAlias": schema.TupleExprAlias;
    "TypeModifier": schema.TypeModifier;
    "Volatility": schema.Volatility;
  };
}


export namespace helper {
  type LinkType = std.BaseObject | std.BaseObject[];

  export type propertyKeys<T> = {
    [k in keyof T]: NonNullable<T[k]> extends LinkType ? never : k;
  }[keyof T];

  export type linkKeys<T> = {
    [k in keyof T]: NonNullable<T[k]> extends LinkType ? k : never;
  }[keyof T];

  export type Props<T> = Pick<T, propertyKeys<T>>;
  export type Links<T> = Pick<T, linkKeys<T>>;
}
