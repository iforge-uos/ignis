// GENERATED by @gel/generate v0.6.2

import * as $ from "../../reflection";
import * as _ from "../../imports";
import type * as _printing from "../printing";
import type * as _std from "../std";
export type $FailureReason = {
  "NO_EXTRUSION_AT_PRINT_START": $.$expr_Literal<$FailureReason>;
  "POOR_BED_ADHESION": $.$expr_Literal<$FailureReason>;
  "UNDER_EXTRUSION": $.$expr_Literal<$FailureReason>;
  "OVER_EXTRUSION": $.$expr_Literal<$FailureReason>;
  "GAPS_IN_TOP_LAYERS": $.$expr_Literal<$FailureReason>;
  "STRINGING_AND_OOZING": $.$expr_Literal<$FailureReason>;
  "OVERHEATING": $.$expr_Literal<$FailureReason>;
  "LAYER_SHIFTING": $.$expr_Literal<$FailureReason>;
  "LAYER_SEPARATION_AND_SPLITTING": $.$expr_Literal<$FailureReason>;
  "FILAMENT_GRINDING": $.$expr_Literal<$FailureReason>;
  "EXTRUDER_CLOG": $.$expr_Literal<$FailureReason>;
  "EXTRUSION_STOPS_MID_PRINT": $.$expr_Literal<$FailureReason>;
  "WEAK_INFILL": $.$expr_Literal<$FailureReason>;
  "BLOBS_AND_ZITS": $.$expr_Literal<$FailureReason>;
  "GAPS_BETWEEN_INFILL_AND_PERIMETER": $.$expr_Literal<$FailureReason>;
  "CORNER_CURLING_AND_ROUGHNESS": $.$expr_Literal<$FailureReason>;
  "TOP_SURFACE_SCARRING": $.$expr_Literal<$FailureReason>;
  "CORNER_GAPS_IN_BOTTOM_LAYER": $.$expr_Literal<$FailureReason>;
  "LAYER_LINES_ON_SIDES": $.$expr_Literal<$FailureReason>;
  "VIBRATION_AND_RINGING": $.$expr_Literal<$FailureReason>;
  "THIN_WALL_GAPS": $.$expr_Literal<$FailureReason>;
  "SMALL_FEATURE_LOSS": $.$expr_Literal<$FailureReason>;
  "INCONSISTENT_EXTRUSION": $.$expr_Literal<$FailureReason>;
  "WARPING": $.$expr_Literal<$FailureReason>;
  "POOR_OVERHANG_QUALITY": $.$expr_Literal<$FailureReason>;
  "DIMENSIONAL_INACCURACY": $.$expr_Literal<$FailureReason>;
  "POOR_BRIDGING": $.$expr_Literal<$FailureReason>;
  "FILAMENT_FEEDING": $.$expr_Literal<$FailureReason>;
  "FILAMENT_RAN_OUT": $.$expr_Literal<$FailureReason>;
  "NOT_A_CLUE": $.$expr_Literal<$FailureReason>;
} & $.EnumType<"printing::print_status::FailureReason", ["NO_EXTRUSION_AT_PRINT_START", "POOR_BED_ADHESION", "UNDER_EXTRUSION", "OVER_EXTRUSION", "GAPS_IN_TOP_LAYERS", "STRINGING_AND_OOZING", "OVERHEATING", "LAYER_SHIFTING", "LAYER_SEPARATION_AND_SPLITTING", "FILAMENT_GRINDING", "EXTRUDER_CLOG", "EXTRUSION_STOPS_MID_PRINT", "WEAK_INFILL", "BLOBS_AND_ZITS", "GAPS_BETWEEN_INFILL_AND_PERIMETER", "CORNER_CURLING_AND_ROUGHNESS", "TOP_SURFACE_SCARRING", "CORNER_GAPS_IN_BOTTOM_LAYER", "LAYER_LINES_ON_SIDES", "VIBRATION_AND_RINGING", "THIN_WALL_GAPS", "SMALL_FEATURE_LOSS", "INCONSISTENT_EXTRUSION", "WARPING", "POOR_OVERHANG_QUALITY", "DIMENSIONAL_INACCURACY", "POOR_BRIDGING", "FILAMENT_FEEDING", "FILAMENT_RAN_OUT", "NOT_A_CLUE"]>;
const FailureReason: $FailureReason = $.makeType<$FailureReason>(_.spec, "05f15452-68cb-11f0-bdb4-a3afadfc94c7", _.syntax.literal);

export type $CancelledλShape = $.typeutil.flatten<_printing.$PrintStatusλShape & {
}>;
type $Cancelled = $.ObjectType<"printing::print_status::Cancelled", $CancelledλShape, null, [
  ..._printing.$PrintStatus['__exclusives__'],
], "printing::print_status::Cancelled">;
const $Cancelled = $.makeType<$Cancelled>(_.spec, "063bba92-68cb-11f0-960f-79ec322c4b0d", _.syntax.literal);

const Cancelled: $.$expr_PathNode<$.TypeSet<$Cancelled, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Cancelled, $.Cardinality.Many), null);

export type $CompleteλShape = $.typeutil.flatten<_printing.$PrintStatusλShape & {
}>;
type $Complete = $.ObjectType<"printing::print_status::Complete", $CompleteλShape, null, [
  ..._printing.$PrintStatus['__exclusives__'],
], "printing::print_status::Complete">;
const $Complete = $.makeType<$Complete>(_.spec, "063d1306-68cb-11f0-a5f5-3b466d9bc211", _.syntax.literal);

const Complete: $.$expr_PathNode<$.TypeSet<$Complete, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Complete, $.Cardinality.Many), null);

export type $FailedλShape = $.typeutil.flatten<_printing.$PrintStatusλShape & {
  "note": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "reason": $.PropertyDesc<$FailureReason, $.Cardinality.One, false, false, false, false>;
}>;
type $Failed = $.ObjectType<"printing::print_status::Failed", $FailedλShape, null, [
  ..._printing.$PrintStatus['__exclusives__'],
], "printing::print_status::Failed">;
const $Failed = $.makeType<$Failed>(_.spec, "063e6fb2-68cb-11f0-97fa-ebe21843efc8", _.syntax.literal);

const Failed: $.$expr_PathNode<$.TypeSet<$Failed, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Failed, $.Cardinality.Many), null);

export type $PrintingλShape = $.typeutil.flatten<_printing.$PrintStatusλShape & {
  "print": $.LinkDesc<_printing.$Print, $.Cardinality.One, {}, false, false,  false, false>;
}>;
type $Printing = $.ObjectType<"printing::print_status::Printing", $PrintingλShape, null, [
  ..._printing.$PrintStatus['__exclusives__'],
], "printing::print_status::Printing">;
const $Printing = $.makeType<$Printing>(_.spec, "06384024-68cb-11f0-be82-5516fcbbe8e2", _.syntax.literal);

const Printing: $.$expr_PathNode<$.TypeSet<$Printing, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Printing, $.Cardinality.Many), null);

export type $QueuedλShape = $.typeutil.flatten<_printing.$PrintStatusλShape & {
}>;
type $Queued = $.ObjectType<"printing::print_status::Queued", $QueuedλShape, null, [
  ..._printing.$PrintStatus['__exclusives__'],
], "printing::print_status::Queued">;
const $Queued = $.makeType<$Queued>(_.spec, "063ff3dc-68cb-11f0-a539-6f32b7fb900c", _.syntax.literal);

const Queued: $.$expr_PathNode<$.TypeSet<$Queued, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Queued, $.Cardinality.Many), null);



export { FailureReason, $Cancelled, Cancelled, $Complete, Complete, $Failed, Failed, $Printing, Printing, $Queued, Queued };

type __defaultExports = {
  "FailureReason": typeof FailureReason;
  "Cancelled": typeof Cancelled;
  "Complete": typeof Complete;
  "Failed": typeof Failed;
  "Printing": typeof Printing;
  "Queued": typeof Queued
};
const __defaultExports: __defaultExports = {
  "FailureReason": FailureReason,
  "Cancelled": Cancelled,
  "Complete": Complete,
  "Failed": Failed,
  "Printing": Printing,
  "Queued": Queued
};
export default __defaultExports;
